{
  "implementations": {
    "es6": {
      "initFunction": "const traverse = (node, path, cb) => {\n  if (node instanceof Array)\n    for (let i = 0, length = node.length; i < length; i++)\n      traverse(node[i], [...path, i], cb);\n  else if (node instanceof Object)\n    for (const key in node)\n      traverse(node[key], [...path, key], cb);\n  else if (node !== undefined)\n    cb(path);\n}\nstate.traverse = traverse;",
      "inputFunctions": {
        "3433f00c-3f07-41a9-8979-8d68b7fd7ec1": "const result = [];\nstate.traverse(data, [], (path) => result.push(path));\noutputs.paths(result, tag);"
      }
    },
    "es6-node": {
      "initFunction": "const traverse = (node, path, cb) => {\n  if (node instanceof Array)\n    for (let i = 0, length = node.length; i < length; i++)\n      traverse(node[i], [...path, i], cb);\n  else if (node instanceof Object)\n    for (const key in node)\n      traverse(node[key], [...path, key], cb);\n  else if (node !== undefined)\n    cb(path);\n}\nstate.traverse = traverse;",
      "inputFunctions": {
        "3433f00c-3f07-41a9-8979-8d68b7fd7ec1": "const result = [];\nstate.traverse(data, [], (path) => result.push(path));\noutputs.paths(result, tag);"
      }
    }
  },
  "interface": {
    "inputs": {
      "3433f00c-3f07-41a9-8979-8d68b7fd7ec1": {
        "type": "any",
        "name": "tree"
      }
    },
    "outputs": {
      "cb0d36f9-d18e-4799-9fcd-9349634391f9": {
        "type": "((string or number)[])[]",
        "name": "paths"
      }
    }
  },
  "name": "data/tree/Paths getter",
  "iconId": "c3fdd7fb-1ae3-400a-bf93-30e24b1ea004",
  "attributes": {
    "locked": true
  }
}
