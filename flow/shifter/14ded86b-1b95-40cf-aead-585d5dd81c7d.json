{
  "implementations": {
    "es6": {
      "inputFunctions": {
        "52beed26-c59d-41c5-905d-8b966db24eb7": "const {last} = state;\nstate.last = data;\nif (last !== undefined) {\n  outputs.data(last, tag);\n} else {\n  outputs.data(data, tag);\n}\n"
      }
    },
    "es6-node": {
      "inputFunctions": {
        "52beed26-c59d-41c5-905d-8b966db24eb7": "const {last} = state;\nstate.last = data;\nif (last !== undefined) {\n  outputs.data(last, tag);\n} else {\n  outputs.data(data, tag);\n}\n"
      }
    }
  },
  "interface": {
    "inputs": {
      "52beed26-c59d-41c5-905d-8b966db24eb7": {
        "type": "any",
        "name": "data",
        "description": "Receives signal to be shifted back."
      }
    },
    "outputs": {
      "40d1a5cf-aced-49cc-9e2f-27dcd6e300f8": {
        "type": "typeof `data`",
        "name": "data",
        "description": "Sends previously received signal."
      }
    }
  },
  "name": "flow/Shifter",
  "description": "Shifts incoming data back in time by releasing the previously received data on each input. \n\nExample:\n1. \"A\"@0 received via `data`.\n2. \"B\"@1 received via `data`.\n3. \"A\"@0 sent via `data` (output).",
  "attributes": {
    "locked": true
  },
  "keywords": {
    "previous signal": null
  }
}