{
    "description":  "",
    "interface":  {
                      "inputs":  {
                                     "tree \u0026 path \u0026 node":  {
                                                                          "type":  "{\"tree\":any[] or {string:any},\"path\":(string | number)[],\"node\":any}"
                                                                      }
                                 },
                      "outputs":  {
                                      "written":  {
                                                      "type":  "null"
                                                  }
                                  }
                  },
    "implementations":  {
                            "es6-node":  {
                                             "cleanupFunction":  "",
                                             "dependencies":  {

                                                              },
                                             "initFunction":  "",
                                             "inputFunctions":  {
                                                                    "tree \u0026 path \u0026 node":  "const {tree, path} = data;\nconst length = path.length - 1;\nlet parent = tree;\nfor (let i=0; i\u003clength; i++) {\n  const key = path[i];\n  let node = parent[key];\n  if (node instanceof Object) {\n    parent = node;\n  } else {\n    // looking ahead to determine parent type\n    switch (typeof path[i + 1]) {\n    case \"string\":\n      node = {};\n      break;\n    case \"number\":\n      node = [];\n      break;\n    }\n    parent[key] = node;\n    parent = node;\n  }\n}\nconst lastPathComponent = path[length];\nparent[lastPathComponent] = data.node;\noutputs.written(null, tag);"
                                                                }
                                         }
                        },
    "name":  "data/tree/Node setter/mutable/_"
}