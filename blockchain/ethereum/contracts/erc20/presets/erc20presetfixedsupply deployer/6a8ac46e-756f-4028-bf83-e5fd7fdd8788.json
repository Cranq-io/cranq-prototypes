{
  "name": "blockchain/ethereum/contracts/erc20/presets/ERC20PresetFixedSupply deployer",
  "description": "Compiles and deploys an ERC20 interface compatible token contract.\nThe particular implementation is derived from a public openzeppelin preset: \"ERC20PresetFixedSupply\"\n\n[base contract at openzeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol)\n\n\n\n",
  "interface": {
    "inputs": {
      "2dd1939f-cbcf-4bfd-9076-1bcf32623d5c": {
        "type": "string",
        "name": "contract name",
        "description": "The name of the created contract. It must be a valid Solidity contract name (no spaces, special characters)."
      },
      "2ce2b32e-927f-41b3-bcab-d77769eb3da9": {
        "type": "{\n   \"name\": string, \n   \"symbol\": string, \n   \"initialSupply\": string,\n   \"owner\": string\n}",
        "name": "init parameters",
        "description": "Receives the parameters to be given to the contract's constructor when deployed.\n\nThe parameters in strict order are:\n\n[name, symbol, initialSupply,owner]\n\nReference:\nSee the constructor of the contract in\n[base contract at openzeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol)\n"
      },
      "c7708f4f-1b7d-4292-bdf6-a607378707b4": {
        "type": "typeof `credentials` of `deploy contract preset`",
        "name": "credentials"
      }
    },
    "outputs": {
      "2b7af6d6-aa19-4c89-9cba-5c8b4a8f6fb0": {
        "type": "typeof `events` of `deploy contract preset`",
        "name": "events"
      },
      "c756affd-6db5-4293-920b-ed329630f3c6": {
        "type": "typeof `source` of `deploy contract preset`",
        "name": "source"
      },
      "27ebe7c3-33de-4485-ba68-e659a8581cd0": {
        "type": "{\n    optional \"evmVersion\": string,\n    \"optimizer\": {\n        \"enabled\": boolean,\n        \"runs\": number\n    }\n}",
        "name": "compile settings"
      },
      "86c83cbf-ac3a-4a4e-bab8-1578bbdcb5ba": {
        "type": "typeof `error` of `deploy contract preset`",
        "name": "error"
      }
    }
  },
  "implementations": {
    "cranq": {
      "nodes": {
        "33a592d8-a575-455f-9037-4fd8ad016440": {
          "coordinates": [
            -202.1953125,
            2.90625
          ],
          "name": "forward contract data",
          "prototype": "ccd44557-20cf-4582-9c10-99bc31b22380"
        },
        "ada60902-1af2-444c-9767-d3aae9f9e29e": {
          "coordinates": [
            135.09201388888903,
            4.348958333333485
          ],
          "name": "deploy contract preset",
          "prototype": "f4f89c90-1285-4803-b3c8-530254056164"
        },
        "c1867a7f-b8ce-4691-8cbb-98342bfdfc4d": {
          "coordinates": [
            -11.28125,
            -80.8515625
          ],
          "name": "contract preset (ERC20PresetFixedSupply)",
          "prototype": "c791825d-ced0-4354-b066-d8488511dd4b",
          "params": {
            "543f8ad2-7755-44f6-bc9b-e6208c87b15a": "{\n  \"name to replace\": \"ContractTemplate_ERC20PresetFixedSupply\",\n  \"compile settings\": {\n  \"includeRoots\": [],\n  \"solidityVersion\": \"v0.8.17+commit.8df45f5f\",\n    \"compileOptions\": {\n      \"evmVersion\": \"london\",\n      \"optimizer\": {\"enabled\": true, \"runs\": 200}\n    }\n},\n\"deploy settings\": {\n        \"gas\": 1000000\n    },\n  \"contract template\": \"\\/\\/ SPDX-License-Identifier: MIT\\r\\n\\r\\n\\/\\/ File: contracts\\/utils\\/Context.sol\\r\\n\\r\\n\\r\\n\\/\\/ OpenZeppelin Contracts v4.4.1 (utils\\/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n *\\/\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: contracts\\/token\\/ERC20\\/IERC20.sol\\r\\n\\r\\n\\r\\n\\/\\/ OpenZeppelin Contracts (last updated v4.6.0) (token\\/ERC20\\/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n *\\/\\r\\ninterface IERC20 {\\r\\n    \\/**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     *\\/\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     *\\/\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     *\\/\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     *\\/\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\/\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     *\\/\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https:\\/\\/github.com\\/ethereum\\/EIPs\\/issues\\/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\/\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\/\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\/\\/ File: contracts\\/token\\/ERC20\\/extensions\\/IERC20Metadata.sol\\r\\n\\r\\n\\r\\n\\/\\/ OpenZeppelin Contracts v4.4.1 (token\\/ERC20\\/extensions\\/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n *\\/\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    \\/**\\r\\n     * @dev Returns the name of the token.\\r\\n     *\\/\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     *\\/\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     *\\/\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n\\/\\/ File: contracts\\/token\\/ERC20\\/ERC20.sol\\r\\n\\r\\n\\r\\n\\/\\/ OpenZeppelin Contracts (last updated v4.7.0) (token\\/ERC20\\/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https:\\/\\/forum.openzeppelin.com\\/t\\/how-to-implement-erc20-supply-mechanisms\\/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n *\\/\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    \\/**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     *\\/\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the name of the token.\\r\\n     *\\/\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     *\\/\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 \\/ 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     *\\/\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     *\\/\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     *\\/\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     *\\/\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     *\\/\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     *\\/\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     *\\/\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     *\\/\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     *\\/\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     *\\/\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            \\/\\/ Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            \\/\\/ decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    \\/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     *\\/\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            \\/\\/ Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     *\\/\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            \\/\\/ Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     *\\/\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     *\\/\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     *\\/\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    \\/**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     *\\/\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\n\\/\\/ File: contracts\\/token\\/ERC20\\/extensions\\/ERC20Burnable.sol\\r\\n\\r\\n\\r\\n\\/\\/ OpenZeppelin Contracts (last updated v4.5.0) (token\\/ERC20\\/extensions\\/ERC20Burnable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n *\\/\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n    \\/**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     *\\/\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    \\/**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n     * `amount`.\\r\\n     *\\/\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n        _spendAllowance(account, _msgSender(), amount);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: contracts\\/token\\/ERC20\\/presets\\/ERC20PresetFixedSupply.sol\\r\\n\\r\\n\\r\\n\\/\\/ OpenZeppelin Contracts (last updated v4.5.0) (token\\/ERC20\\/presets\\/ERC20PresetFixedSupply.sol)\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\/**\\r\\n * @dev {ERC20} token, including:\\r\\n *\\r\\n *  - Preminted initial supply\\r\\n *  - Ability for holders to burn (destroy) their tokens\\r\\n *  - No access control mechanism (for minting\\/pausing) and hence no governance\\r\\n *\\r\\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\\r\\n * its documentation for details.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n *\\r\\n * _Deprecated in favor of https:\\/\\/wizard.openzeppelin.com\\/[Contracts Wizard]._\\r\\n *\\/\\r\\ncontract ERC20PresetFixedSupply is ERC20Burnable {\\r\\n    \\/**\\r\\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\\r\\n     *\\r\\n     * See {ERC20-constructor}.\\r\\n     *\\/\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 initialSupply,\\r\\n        address owner\\r\\n    ) ERC20(name, symbol) {\\r\\n        _mint(owner, initialSupply);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: ContractTemplate_ERC20PresetFixedSupply.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ncontract ContractTemplate_ERC20PresetFixedSupply is ERC20PresetFixedSupply {\\r\\n    constructor(string memory name, string memory symbol, uint256 initialSupply, address owner) ERC20PresetFixedSupply(name, symbol, initialSupply, owner) {\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"\n}"
          }
        },
        "728dd2a2-34ec-4e26-9146-6b4a0ae06fa6": {
          "coordinates": [
            -15,
            64
          ],
          "name": "maps init parameters values to array",
          "prototype": "83ac4d5d-9ac9-48d0-ae17-a5a77b18cfb6",
          "params": {
            "72550b19-9434-43d7-a6af-468a19288808": "[\"name\", \"symbol\", \"initialSupply\",\"owner\"]"
          }
        }
      },
      "connections": {
        "33a592d8-a575-455f-9037-4fd8ad016440": {
          "c3fcabea-63e8-48a2-b736-e7a9954cf5ca": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "741d010c-14a6-4dd1-b528-0d5386187bb7": {}
            },
            "c1867a7f-b8ce-4691-8cbb-98342bfdfc4d": {
              "0b28df10-b056-4666-ae14-2357d747f7b9": {}
            }
          },
          "3f67095a-501d-4010-b37d-4e1ece60e2f2": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "11c0a845-1293-4670-9390-0a0586122a6f": {}
            }
          },
          "9b746d54-f007-4bc0-9988-acb0a0a05cd5": {
            "728dd2a2-34ec-4e26-9146-6b4a0ae06fa6": {
              "257885b0-08c2-41c8-ba17-d6f9b80e93d1": {}
            }
          }
        },
        "c1867a7f-b8ce-4691-8cbb-98342bfdfc4d": {
          "e7a0df14-dc8c-41bd-8aba-367fdb468ce3": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "b53990d6-c237-4d59-9dbf-b2fa712181a7": {}
            }
          }
        },
        "728dd2a2-34ec-4e26-9146-6b4a0ae06fa6": {
          "6dd99f55-3d65-42ca-b301-c2c6367c334c": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "67510810-61e0-4c9d-b06d-10fbe7c4a740": {}
            }
          }
        }
      },
      "forwards": {
        "inputs": {
          "2dd1939f-cbcf-4bfd-9076-1bcf32623d5c": {
            "33a592d8-a575-455f-9037-4fd8ad016440": {
              "70da607a-8976-437b-b9e9-84cc63cd613b": {}
            }
          },
          "2ce2b32e-927f-41b3-bcab-d77769eb3da9": {
            "33a592d8-a575-455f-9037-4fd8ad016440": {
              "54c357a1-045e-4817-beda-0017a586a499": {}
            }
          },
          "c7708f4f-1b7d-4292-bdf6-a607378707b4": {
            "33a592d8-a575-455f-9037-4fd8ad016440": {
              "507a0b1a-b9eb-4e67-a64d-47b405e17422": {}
            }
          }
        },
        "outputs": {
          "86c83cbf-ac3a-4a4e-bab8-1578bbdcb5ba": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "b771d246-9110-4c33-82bf-dfb979e66235": {}
            }
          },
          "2b7af6d6-aa19-4c89-9cba-5c8b4a8f6fb0": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "2acecfad-46ec-48f8-80ea-332931523eef": {}
            }
          },
          "c756affd-6db5-4293-920b-ed329630f3c6": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "41ca2dbd-2701-45d8-8411-8dea422e9563": {}
            }
          },
          "27ebe7c3-33de-4485-ba68-e659a8581cd0": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "147727db-184c-41df-90e3-e4ab656781a2": {}
            }
          }
        }
      }
    }
  },
  "iconId": "abac34e3-c832-4c7b-b045-62f82ebc3ddb",
  "original": "5218004f-9d1c-4605-9b73-a0eee1e72d5d",
  "keywords": {
    "erc20": null,
    "token": null
  },
  "attributes": {
    "locked": true
  }
}
