{
    "description":  "Bundles input signals that have the same tag.",
    "interface":  {
                      "inputs":  {
                                     "fields":  {
                                                    "description":  "Receives a list of custom input port names through which the node will receive signals for syncing.",
                                                    "type":  "string[]"
                                                },
                                     "unsynced":  {
                                                      "description":  "Receives individual fields for syncing.",
                                                      "paramId":  "fields",
                                                      "type":  "any"
                                                  }
                                 },
                      "outputs":  {
                                      "synced":  {
                                                     "description":  "Sends synchronized inputs as a dictionary, indexed by field.",
                                                     "type":  "{typeof(fields):any}"
                                                 }
                                  }
                  },
    "implementations":  {
                            "es6-node":  {
                                             "cleanupFunction":  "",
                                             "dependencies":  {

                                                              },
                                             "initFunction":  "const fields = params.fields || []\nstate.dynamicFields = fields\n  .filter(field =\u003e params[field] === undefined);\nstate.staticBundle = fields\n  .filter(field =\u003e params[field] !== undefined)\n  .reduce(\n    (result, field) =\u003e {result[field] = params[field]; return result},\n    typeof fields[0] === \"number\" ? [] : {});\nstate.bundlesByTag = state.bundlesByTag || new Map();\nstate.portsByTag = state.portsByTag || new Map();\nstate.copy = (value) =\u003e value instanceof Array\n  ? [...value] : value instanceof Object\n    ? {...value} : value;",
                                             "inputFunctions":  {
                                                                    "unsynced":  "const {bundlesByTag, portsByTag} = state;\nlet bundle = bundlesByTag.get(tag);\nif (!bundle) {\n  bundle = state.copy(state.staticBundle);\n  bundlesByTag.set(tag, bundle);\n}\nlet ports = portsByTag.get(tag);\nif (!ports) {\n  ports = new Set(state.dynamicFields);\n  portsByTag.set(tag, ports);\n}\nbundle[input] = data;\nports.delete(input);\nif (ports.size === 0) {\n  bundlesByTag.delete(tag);\n  portsByTag.delete(tag);\n  outputs.synced(bundle, tag);\n}"
                                                                }
                                         }
                        },
    "name":  "flow/Syncer"
}