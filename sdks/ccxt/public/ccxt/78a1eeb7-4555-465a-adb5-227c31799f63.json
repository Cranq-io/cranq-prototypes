{
  "implementations": {
    "es6-node": {
      "dependencies": {
        "npm": {
          "ccxt": {
            "description": ""
          }
        }
      },
      "inputFunctions": {
        "faa04647-7b0d-4187-86ff-d39034e4b0c4": "const ccxt = require (\"ccxt\")\nconst {exhange, apiId, query} = data;\nconst {symbol, symbols, code, timeframe, since, limit} = query;\nconst params = query.params || {};\n\ntry {\n  const xchange = new ccxt[exhange.id];\n  if (apiId === \"loadMarkets\") {\n    xchange\n    .loadMarkets()\n    .then((result)=> outputs.data(result, tag))\n    .catch((er)=> outputs.error({error: \"loadMarkets call was not successful.\", details: er.toString()}, tag));\n  }\n  else {\n    if (xchange.has[apiId]){\n      switch (apiId) {\n        case \"fetchOrderBook\":\n          xchange\n          .fetchOrderBook(symbol, limit, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchOrderBook call was not successful.\", details: er.toString()}, tag));\n          break;\n        case \"fetchOrderBooks\":\n          xchange\n          .fetchOrderBooks(symbols, limit, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchOrderBooks call was not successful.\", details: er.toString()}, tag));\n          break;\n        case \"fetchTicker\":\n          xchange\n          .fetchTicker(symbol, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchTicker call was not successful.\", details: er.toString()}, tag));\n          break;\n        case \"fetchTickers\":\n          xchange\n          .fetchTickers(symbols, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchTickers call was not successful.\", details: er.toString()}, tag));\n          break;\n        case \"fetchOHLCV\":\n          xchange\n          .fetchOHLCV(symbol, timeframe, since, limit, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchOHLCV call was not successful.\", details: er.toString()}, tag));\n          break;\n        case \"fetchTrades\":\n          xchange\n          .fetchTrades (symbol, since, limit, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchTrades  call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchTime\":\n          xchange\n          .fetchTime (params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchTime  call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchStatus\":\n          xchange\n          .fetchStatus (params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchStatus  call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchBorrowRate\":\n          xchange\n          .fetchBorrowRate(code, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchBorrowRate call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchBorrowRates\":\n          xchange\n          .fetchBorrowRates(params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchBorrowRates call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchBorrowRatesPerSymbol\":\n          xchange\n          .fetchBorrowRatesPerSymbol(params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchBorrowRatesPerSymbol call was not successful.\", details: er.toString()}, tag));\n          break;\n        case \"fetchBorrowRateHistory\":\n          xchange\n          .fetchBorrowRateHistory(code, since, limit, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchBorrowRateHistory call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchMarketLeverageTiers\":\n          xchange\n          .fetchMarketLeverageTiers(symbol, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchMarketLeverageTiers call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchLeverageTiers\":\n          xchange\n          .fetchLeverageTiers(symbols, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchLeverageTiers call was not successful.\", details: er.toString()}, tag));\n          break;\n        case \"fetchFundingRate\":\n          xchange\n          .fetchFundingRate(symbol, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchFundingRate call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchFundingRates\":\n          xchange\n          .fetchFundingRates(symbols, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchFundingRates call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchFundingRateHistory\":\n          xchange\n          .fetchFundingRateHistory(symbol, since, limit, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchFundingRateHistory call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchOpenInterestHistory\":\n          xchange\n          .fetchOpenInterestHistory(symbol, timeframe, since, limit, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchOpenInterestHistory call was not successful.\", details: er.toString()}, tag));\n          break; \n        case \"fetchPositionsRisk\":\n          xchange\n          .fetchPositionsRisk(symbols, params)\n          .then((result)=> outputs.data(result, tag))\n          .catch((er)=> outputs.error({error: \"fetchPositionsRisk call was not successful.\", details: er.toString()}, tag));\n          break; \n        default:\n          outputs.error({error: \"Invalid apiId: \" + apiId})\n      }\n    }\n    else {\n      outputs.error({error: `Exhange with id: ${exhange.id} does not support ${apiId}`})\n    }\n  }\n} catch (e){\n  outputs.error({error: `Unexpected error on exhange with id: ${exhange.id}`, details: e.toString()})\n}\n"
      }
    }
  },
  "interface": {
    "inputs": {
      "faa04647-7b0d-4187-86ff-d39034e4b0c4": {
        "type": "{\n  \"exhange\": {\n     \"id\": string\n  },\n  \"apiId\": (\"loadMarkets\" or \"fetchOrderBook\" or \"fetchOrderBooks\" or \"fetchTicker\" or \"fetchTickers\" or \"fetchOHLCV\" or \"fetchTrades\" or \"fetchTime\" or \"fetchStatus\" or \"fetchBorrowRate\" or \"fetchBorrowRates\" or \"fetchBorrowRatesPerSymbol\" or \"fetchBorrowRateHistory\" or \"fetchMarketLeverageTiers\" or \"fetchFundingRate\" or \"fetchFundingRateHistory \" or \"fetchOpenInterestHistory\" or \"fetchPositionsRisk\"),\n  \"query\": any\n}",
        "name": "action"
      }
    },
    "outputs": {
      "a9ed491a-2114-43b4-bb91-45b4b56c3bbb": {
        "type": "any",
        "name": "data"
      },
      "de97ff64-6274-4fd2-af01-2a8e652a2188": {
        "type": "{\n  \"error\": string,\n  \"details\": any\n}",
        "name": "error"
      }
    }
  },
  "name": "sdks/ccxt/public/ccxt",
  "original": "6ecf3c10-9070-45e5-bcfe-0bf3599fe81f",
  "keywords": {
    "": null
  },
  "iconId": "47baa0d3-adcc-4071-8ab3-768676771342",
  "description": "Integrates the ccxt public api.\n\nhttps://docs.ccxt.com/en/latest/manual.html#public-api",
  "attributes": {
    "locked": true
  }
}
