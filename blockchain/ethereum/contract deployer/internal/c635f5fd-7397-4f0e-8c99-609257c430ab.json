{
  "implementations": {
    "es6-node": {
      "dependencies": {
        "npm": {
          "web3": {
            "description": ""
          }
        }
      },
      "inputFunctions": {
        "d4d6f2e9-1a7a-4bc8-8d8c-c0c8d0eacc68": "const Web3 = require(\"web3\");\n\nconst {contract, contractParams, settings, estimateGas = false} = data ?? {};\nif (!(contract && contractParams && settings)) {\n  throw new Error(\"Input data is invalid. Please check it complies with type!\");\n}\n\nconst {providerUrl, privateKey, gas, gasPrice} = settings ?? {};\nif (!(providerUrl && gas)) {\n  throw new Error(\"Input data contains invalid value for `settings`. Please check type!\");\n}\n\nconst abi = contract.abi;\nconst bytecode = contract.evm.bytecode.object;\n\nasync function main() {\n  const web3 = new Web3(providerUrl);\n  const accountAddress = await getFirstAccountAddress(web3, privateKey);\n  const ethContract = new web3.eth.Contract(abi, {from: accountAddress});\n  ethContract.options.data = bytecode;\n\n  const deployTx = ethContract.deploy({data: bytecode, arguments: contractParams});\n  if (estimateGas === true) {\n    outputs[\"estimated gas\"](await deployTx.estimateGas(), tag);\n  } else {\n    try {\n      shared.nonces = shared.nonces || {};\n      const observedNonce = await web3.eth.getTransactionCount(accountAddress);\n      const stateNonce = shared.nonces[accountAddress];\n      const nonce = (stateNonce) ? Math.max(stateNonce, observedNonce) : observedNonce;\n      shared.nonces[accountAddress] = nonce + 1;\n      const newContractInstance = await deploy(deployTx, nonce);\n      outputs[\"contract\"](newContractInstance, tag);\n    } catch (error) {\n      outputs[\"error\"]({error: error.message}, tag);\n    }\n  }\n}\n\n\nasync function getFirstAccountAddress(web3, privateKey) {\n  if(privateKey) {\n    const signer = web3.eth.accounts.privateKeyToAccount(privateKey);\n    web3.eth.accounts.wallet.add(signer);\n    return web3.eth.accounts.wallet[0].address;\n  }\n\n  return (await web3.eth.getAccounts())[0];\n}\n\nasync function deploy(deployTx, nonce) {\n  return deployTx.send({\n      gas: gas,\n      gasPrice: gasPrice,\n      nonce: nonce\n    })\n    .once(\"transactionHash\", (txhash) => {\n      outputs[\"transaction hash\"](txhash, tag);\n    })\n    .once(\"receipt\", (receipt) => {\n      outputs[\"receipt\"](receipt, tag);\n    })\n    .on(\"confirmation\", (confirmationNumber, receipt, latestBlockHash) => {\n      outputs[\"confirmation\"](\n        {\n          confirmationNumber: confirmationNumber,\n          receipt: receipt,\n          latestBlockHash: latestBlockHash\n        },\n        tag\n      );\n    });\n}\n\nmain();"
      }
    }
  },
  "interface": {
    "inputs": {
      "d4d6f2e9-1a7a-4bc8-8d8c-c0c8d0eacc68": {
        "type": "{\n  \"contract\": {\n    \"abi\": {string:any}[],\n    \"evm\": {\n      \"bytecode\": {\n        \"object\": string\n      }\n    }\n  },\n\"contractParams\": string[], \n\"settings\":  {\n    \"providerUrl\": string, \n    \"privateKey\": string,\n    \"gas\": number, \n    optional \"gasPrice\": string\n  }, \n\"estimateGas\": boolean\n}",
        "name": "parameters"
      }
    },
    "outputs": {
      "e7f5a7aa-c9d8-48d5-a248-3b2cac4262f1": {
        "type": "string",
        "name": "transaction hash",
        "description": "Sends out the transaction hash of the deployment received from the chain."
      },
      "b81cd0dc-f7c4-43c4-8579-7e2c38cff351": {
        "type": "{string:any}",
        "name": "receipt",
        "description": "Sends out the receipt of the deployment as received from the chain."
      },
      "64e1ca3c-3e06-4ed5-9563-d71098ea99f4": {
        "type": "{\n  \"confirmationNumber\": number,\n  \"receipt\": {\n    \"contractAddress\": string\n  },\n  \"latestBlockHash\": string\n}",
        "name": "confirmation",
        "description": "Sends out the confirmation(s) of the deployment as received from the chain."
      },
      "dc68467f-bdb9-4d16-9eb7-0d4d366b95ff": {
        "type": "{string:any}",
        "name": "contract",
        "description": "Sends out the deployed contract instance."
      },
      "96043b1f-6b74-408f-a93b-c6b7abc603d5": {
        "type": "number",
        "name": "estimated gas",
        "description": "Sends out the estimated amount of gas required for the deployment."
      },
      "0eb501ee-6d8f-4ef6-bdb9-95d3ebdce818": {
        "type": "{\"error\": string}",
        "name": "error",
        "description": "Sends out any error that happened during deployment"
      }
    }
  },
  "name": "blockchain/ethereum/Contract deployer/Internal",
  "attributes": {
    "internal": true,
    "locked": true
  }
}
