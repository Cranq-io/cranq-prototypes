{
  "implementations": {
    "es6": {
      "inputFunctions": {
        "f5e0ae76-bfc3-4041-98b7-9fbc6688a148": "outputs.data(data, `${tag}:0`);"
      }
    },
    "es6-node": {
      "inputFunctions": {
        "f5e0ae76-bfc3-4041-98b7-9fbc6688a148": "outputs.data(data, `${tag}:0`);"
      }
    }
  },
  "interface": {
    "inputs": {
      "f5e0ae76-bfc3-4041-98b7-9fbc6688a148": {
        "type": "any",
        "name": "data",
        "description": "Receives the signal to be nested."
      }
    },
    "outputs": {
      "f61bcb62-2072-41d6-87da-79ccad20f7d2": {
        "type": "typeof `data`",
        "name": "data",
        "description": "Sends signal with data identical to the one received via `data`, but with nested tag."
      }
    }
  },
  "name": "flow/Tag nester",
  "description": "Creates a new level of iteration on the received tag, by appending \":0\" to it.\n\nOpposite of `flow/Tag trimmer`.\n\nUsed for lining up signals with iterations. (See eg. `data/array/Iterator`.)\n\nExample:\n1. \"A\"@0 received via `data`\n2. \"A\"@\"0:0\" is sent via `data` (output)\n\nSee also:\n* `flow/Tag incrementer`\n* `flow/Tag trimer`",
  "attributes": {
    "locked": true
  },
  "keywords": {
    "simulate iteration": null,
    "fake iteration": null,
    "synchronization": null,
    "syncing": null
  }
}