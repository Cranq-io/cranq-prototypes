{
  "description": "Flattens a tree into a flat dictionary with keys created by prepending parent keys and a delimiter to child keys recursively.\n\nExample:\n\n1. {\"a\": {\"a1\": 1, \"a2\":2}}@0 is received via `tree`\n2. \"-\"@0 is received via `delimiter`\n3. {\"a-a1\": 1, \"a-a2\":2}@0 is sent via `flattened`",
  "interface": {
    "inputs": {
      "5eacb3f2-0e3d-4944-b933-4a119cdcdb59": {
        "description": "The tree to flatten",
        "type": "any[] or {string: any}",
        "name": "tree"
      },
      "3a97b9dd-4dc6-41d2-9072-ed7f4074edd5": {
        "description": "The delimiter to use when prepending parent keys to child keys",
        "type": "string",
        "name": "delimiter"
      }
    },
    "outputs": {
      "426bf938-9b69-456a-b4b3-d03c2eb5f904": {
        "description": "The flat dictionary",
        "type": "{string: any}",
        "name": "flattened"
      }
    }
  },
  "implementations": {
    "es6": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "",
      "inputFunctions": {
        "5eacb3f2-0e3d-4944-b933-4a119cdcdb59": "function flatten(tree, baseKey = \"\", delimiter = \".\") {\n  function flattenToKeyValueList(tree, baseKey = \"\") {\n    return Array.isArray(tree)\n      ? flattenToKeyValueList( // convert to object with numeric keys then proceed as usual\n        tree.reduce((acc, value, index) => ({ ...acc, ...({[index]: value})}), {}),\n        baseKey\n      )\n      : Object.entries(tree).flatMap(([key, value]) => {\n        const compoundKey = `${baseKey ? `${baseKey}${delimiter}` : \"\"}${key}`;\n        if (typeof value === \"object\" && value !== null) {\n          return flattenToKeyValueList(value, compoundKey);\n        }\n        return [compoundKey, value];\n      });\n  }\n\n  function fromKeyValueList(list) {\n    return list.reduce((acc, curr, index, source) => {\n      if (index % 2 === 1) { // every second is value, process it\n        acc[source[index - 1]] = curr;\n      }\n      return acc;\n    }, {});\n  }\n\n  return fromKeyValueList(flattenToKeyValueList(tree));\n}\n\noutputs.flattened(flatten(data, \"\", params.delimiter), tag);"
      }
    },
    "es6-node": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "",
      "inputFunctions": {
        "5eacb3f2-0e3d-4944-b933-4a119cdcdb59": "function flatten(tree, baseKey = \"\", delimiter = \".\") {\n  function flattenToKeyValueList(tree, baseKey = \"\") {\n    return Array.isArray(tree)\n      ? flattenToKeyValueList( // convert to object with numeric keys then proceed as usual\n        tree.reduce((acc, value, index) => ({ ...acc, ...({[index]: value})}), {}),\n        baseKey\n      )\n      : Object.entries(tree).flatMap(([key, value]) => {\n        const compoundKey = `${baseKey ? `${baseKey}${delimiter}` : \"\"}${key}`;\n        if (typeof value === \"object\" && value !== null) {\n          return flattenToKeyValueList(value, compoundKey);\n        }\n        return [compoundKey, value];\n      });\n  }\n\n  function fromKeyValueList(list) {\n    return list.reduce((acc, curr, index, source) => {\n      if (index % 2 === 1) { // every second is value, process it\n        acc[source[index - 1]] = curr;\n      }\n      return acc;\n    }, {});\n  }\n\n  return fromKeyValueList(flattenToKeyValueList(tree));\n}\n\noutputs.flattened(flatten(data, \"\", params.delimiter), tag);"
      }
    }
  },
  "name": "data/tree/Flattener",
  "attributes": {
    "locked": true
  },
  "keywords": {
    "flatten": null,
    "tree": null,
    "transform": null
  }
}