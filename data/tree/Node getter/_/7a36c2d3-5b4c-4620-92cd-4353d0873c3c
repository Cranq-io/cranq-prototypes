{
    "description":  "",
    "interface":  {
                      "inputs":  {
                                     "tree \u0026 path":  {
                                                              "type":  "{\"tree\":any[] or {string:any},\"path\":(string | number)[]}"
                                                          }
                                 },
                      "outputs":  {
                                      "node":  {
                                                   "type":  "any"
                                               },
                                      "not found":  {
                                                        "description":  "",
                                                        "type":  "any"
                                                    }
                                  }
                  },
    "implementations":  {
                            "es6-node":  {
                                             "cleanupFunction":  "",
                                             "dependencies":  {

                                                              },
                                             "initFunction":  "",
                                             "inputFunctions":  {
                                                                    "tree \u0026 path":  "const {tree, path} = data;\nlet node = tree;\nfor (let i=0, length=path.length; i\u003clength; i++) {\n  if (node instanceof Object) {\n    node = node[path[i]];\n  } else {\n    node = undefined;\n    break;\n  }\n}\nif(node === undefined) {\n  outputs[\"not found\"](path, tag)\n}\nelse {\n  outputs.node(node, tag);\n}"
                                                                }
                                         }
                        },
    "name":  "data/tree/Node getter/_"
}