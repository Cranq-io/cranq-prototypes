{
  "implementations": {
    "es6-node": {
      "inputFunctions": {
        "244fb79b-f74f-4ba9-ad9b-9d4bbfb66d96": "const Web3 = require(\"web3\");\n\nconst {\n  \"contract parameters\": contractParameters,\n  \"web3 credentials\": web3Credentials,\n  \"transaction parameters\": inputTransactionParameters = {}\n} = data ?? {};\nif (!(\n  contractParameters\n  && typeof contractParameters === \"object\"\n  && web3Credentials\n  && typeof web3Credentials === \"object\"\n  && typeof inputTransactionParameters === \"object\"\n)) {\n  throw new Error(\"Input data is invalid. Please check it complies with type!\");\n}\n\nconst defaultTransactionParameters = { gas: 2200 };\nconst transactionParameters = {\n  ...defaultTransactionParameters,\n  ...inputTransactionParameters\n};\n\nconst {\n  \"contract address\": contractAddress,\n  \"method name\": methodName,\n  parameters,\n  alters,\n  abi\n} = contractParameters;\nif (!(\n  contractAddress\n  && methodName\n  && parameters\n  && Array.isArray(parameters)\n  && typeof alters === \"boolean\"\n)) {\n  throw new Error(\"Input data contains invalid value for `contract parameters`. Please check type!\");\n}\n\nconst {providerUrl, privateKey} = web3Credentials;\nif(!(\n  providerUrl\n  && privateKey\n)) {\n  throw new Error(\"Input data contains invalid value for `web3 credentials`. Please check type!\");\n}\n\nconst provider = new Web3.providers.HttpProvider(providerUrl);\nconst web3 = new Web3(provider);\nconst signer = web3.eth.accounts.privateKeyToAccount(privateKey);\nweb3.eth.accounts.wallet.add(signer);\nconst contract = new web3.eth.Contract(abi, contractAddress, {from: signer.address});\n\nasync function main() {\n  let res;\n\n  if (alters) {\n    //  More sophisticated gas estimation algorythm\n    // FIXME: gas should come from settings\n    res = await contract.methods[methodName](...parameters).send(transactionParameters);\n  } else {\n    res = await contract.methods[methodName](...parameters).call();\n  }\n  outputs[\"result\"](res, tag);\n}\n\nmain().catch((e) => {\n  outputs[\"error\"]({error: e.toString()}, tag);\n});"
      },
      "dependencies": {
        "npm": {
          "web3": {
            "description": ""
          }
        }
      }
    }
  },
  "interface": {
    "inputs": {
      "244fb79b-f74f-4ba9-ad9b-9d4bbfb66d96": {
        "type": "{\n  \"contract parameters\": {\n    \"contract address\": string,\n    \"abi\": {string:any}[],\n    \"method name\": string,\n    \"parameters\": any[],\n    \"alters\": boolean\n},\n  \"web3_credentials\": {\n    \"providerUrl\": string,\n    \"privateKey\": string\n  },\n optional \"transaction parameters\": {string:any}\n}",
        "name": "data"
      }
    },
    "outputs": {
      "a8910f08-11f8-4764-817b-ea55ea851dd5": {
        "type": "any",
        "name": "result"
      },
      "00cbcc07-f756-4b6f-a21e-4e7ddcaa2b9b": {
        "type": "{\"error\": string}",
        "name": "error"
      }
    }
  },
  "name": "blockchain/ethereum/Contract caller/Internal",
  "original": "ca43b3b3-b12a-4bf7-b628-6c1c0524048f",
  "attributes": {
    "internal": true,
    "locked": true
  }
}
