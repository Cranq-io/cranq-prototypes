{
  "implementations": {
    "es6-node": {
      "inputFunctions": {
        "f55027fb-90be-4ba9-839f-df2ca3b77a37": "const {exec} = require(\"child_process\");\nif (state.running)\n  outputs.bounced(data, tag);\nelse {\n  state.running = true;\n  exec(data, (error, stdout, stderr) => {\n    if (error)\n      outputs.error(`${error}`, tag);\n    else {\n      outputs.stdout(stdout || \"\", tag);\n      outputs.stderr(stderr || \"\", tag);\n      outputs.error(null, tag);\n    }\n    state.running = false;\n  });\n}"
      }
    }
  },
  "interface": {
    "inputs": {
      "f55027fb-90be-4ba9-839f-df2ca3b77a37": {
        "type": "string",
        "name": "command",
        "description": "Command to be executed. Must be valid in the context of the current OS.\n\nIt's recommended to verify the OS before attempting to execute."
      }
    },
    "outputs": {
      "64494ca8-9430-4f72-834b-f560c58dbc39": {
        "type": "string",
        "name": "stdout"
      },
      "5b068d45-0f38-49c0-b0a4-6ee1a62a1ebe": {
        "type": "string",
        "name": "stderr"
      },
      "1c0cf706-f4ac-4836-b554-99efe3d2f1c2": {
        "type": "string or null",
        "name": "error",
        "description": "Null on success."
      },
      "8ede58cb-4731-4de1-8e6a-72ca1027b2ae": {
        "type": "string",
        "name": "on busy",
        "description": "The received command when the node is still executing another command."
      }
    }
  },
  "name": "system/Command runner",
  "description": "Runs the received command string.\n\nSends stdout, stderr and optionally error message when the process finished.\n\nBounces command when the node is already in the state of executing a command."
}