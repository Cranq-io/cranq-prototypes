{
  "implementations": {
    "es6-node": {
      "dependencies": {
        "npm": {
          "express": {
            "description": ""
          },
          "cors": {
            "description": ""
          }
        }
      },
      "inputFunctions": {
        "816628e2-c7f2-41f6-8cf2-27d752eff31c": "try\n{\n  const express = require(\"express\");\n  const cors = require(\"cors\");\n  const {id, type, options = {}} = data;\n  let instance = shared[id];\n  if (!instance) {\n    const app = express();\n    instance = shared[id] = {app, listening: false};\n    const errorHandler = (err, req, res, next) => {\n      res.status(500);\n      outputs.error({\n        error: String(err),\n        origin: \"request\"\n      }, tag);\n    }\n    app.use(errorHandler);\n  }\n  const {app, listening} = instance;\n  switch (type) {\n  case \"use\":\n    const {middleware} = options;\n    switch (middleware) {\n    case \"text\":\n      app.use(express.text());\n      outputs.done(null, tag);\n      break;\n    case \"json\":\n      app.use(express.json());\n      outputs.done(null, tag);\n      break;\n    case \"urlencoded\":\n      app.use(express.urlencoded());\n      outputs.done(null, tag);\n      break;\n    case \"cors\":\n      app.use(cors());\n      outputs.done(null, tag);\n      break;\n    }\n    break;\n  case \"listen\":\n    if (!listening) {\n      const {port, host} = options;\n      app.listen(port, host, () => outputs.done(\n        {\n          port, \n          hostname: host\n        }, tag))\n        .on('error', (err) => outputs.error(\n          {\n            error: String(err),\n            origin: \"server\"\n          }, tag));\n      instance.listening = true;\n    } else {\n      outputs.done(null, tag);\n    }\n    break;\n  case \"method\":\n    const {method, route} = options;\n    app[method.toLowerCase()](route, (req, res) => {\n      const reqTag = `${tag}#${state.reqCount++}`;\n      state[reqTag] = res;\n      const {\n        baseUrl, body, cookies, hostname, headers, ip, ips, method, originalUrl, params, path, protocol, query, route, secure, signedCookies, stale, subdomains, xhr\n      } = req;\n      outputs.request({\n        baseUrl, body, cookies, hostname, headers, ip, ips, method, originalUrl, params, path, protocol, query, route, secure, signedCookies, stale, subdomains, xhr\n      }, reqTag);\n    });\n    outputs.done(null, tag);\n    break;\n  }\n} catch(err) {\n  outputs.error({\n    error: String(err),\n    origin: \"server\"\n  }, tag);\n}",
        "a6b8ed07-3298-4bc7-acee-4c18f2399ffd": "const res = state[tag];\nconst {status, headers, body} = data;\nif (res) {\n  res.status(status);\n  for (const header in headers)\n    res.set(header, headers[header]);\n  res.send(body);\n  delete state[tag];\n}"
      },
      "initFunction": "state.reqCount = 0;"
    }
  },
  "interface": {
    "inputs": {
      "816628e2-c7f2-41f6-8cf2-27d752eff31c": {
        "type": "{\"id\": string, \"type\": string, \"options\": {string: any}}",
        "name": "action",
        "description": "Receives the parameters of the action to execute.\n\nExample: \n{\n  \"id\": \"my-express-server\",\n  \"type\": \"listen\",\n  \"options\": {\n    \"port\": 3000\n  }\n}"
      },
      "a6b8ed07-3298-4bc7-acee-4c18f2399ffd": {
        "type": "{\"status\": number, \"headers\": {string: string}, \"body\": any}",
        "name": "response",
        "description": "Receives the response to be sent out to the client.\n\nExample:\n{\n  \"status\": 200,\n  \"headers\": {\n    \"content-type\": \"application/json\" \n  },\n  \"body\": \"Done\"\n}"
      }
    },
    "outputs": {
      "38ea8704-dc28-470e-b30f-f1eee9adaafd": {
        "type": "{\"baseUrl\": string, \"body\": any, \"cookies\": any, \"hostname\": string, \"headers\": {string: string}, \"ip\": string, \"ips\": string[], \"method\": (\"GET\" or \"POST\" or \"PUT\" or \"PATCH\" or \"DELETE\"), \"originalUrl\": string, \"params\": {string: string}, \"path\": string, \"protocol\": (\"http\" or \"https\"), \"query\": {string: any}, \"route\": string, \"secure\": boolean, \"signedCookies\": any, \"stale\": boolean, \"subdomains\": string[], \"xhr\": boolean}",
        "name": "request",
        "description": "Sends the request processed by  defined handlers. Can be used to post-process the request."
      },
      "2d59f4f5-da3a-4e88-b071-f863cda4e553": {
        "type": "(null or {\"port\": number, \"hostname\": string})",
        "name": "done",
        "description": "Event triggered when the specified action has been executed."
      },
      "1eb10a35-5039-4196-b3b5-e59757befe88": {
        "type": "{\"error\": string, \"origin\": string}",
        "name": "error",
        "description": "Sends error information in case the specified action could not be successfully executed.\n\nExample:\n{\n  \"error\": \"listen EADDRINUSE: address already in use 127.0.0.1:8080\",\n  \"origin\": \"server\"\n}"
      }
    }
  },
  "name": "sdks/expressjs/Express",
  "description": "Core interface to Express.js. Use higher level nodes to interact with Express.",
  "keywords": {
    "http server": null,
    "api": null,
    "express": null,
    "rest": null
  },
  "iconId": "47baa0d3-adcc-4071-8ab3-768676771342",
  "attributes": {
    "locked": true
  }
}
