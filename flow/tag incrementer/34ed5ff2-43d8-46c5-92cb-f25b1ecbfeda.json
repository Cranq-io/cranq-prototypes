{
  "description": "Increments the iterable (colon-separated) part of the received signal's tag.\n\nBounces when tag is not iterable.\n\nUsed for lining up signals with iterations. (See eg. `data/array/Iterator`.)\n\nExample A (success):\n1. \"A\"@\"x:1\" received via `data`\n2. \"A\"@\"x:2\" is sent via `data` (output)\n\nExample B (invalid input):\n1. \"A\"@\"x\" received via `data`\n2. \"A\"@\"x\" is sent via `bounced`\n\nSee also:\n* `flow/Tag nester`\n* `flow/Tag trimer`",
  "interface": {
    "inputs": {
      "4b2b80cb-8d64-40a5-ae06-342257b858cc": {
        "type": "any",
        "name": "data",
        "description": "Receives signal with iterable tag.\n\nWhen the tag is not iterable, the signal will be bounced."
      }
    },
    "outputs": {
      "b9ad661b-2879-4b8f-9335-c223ba010a4b": {
        "type": "typeof `data`",
        "name": "data",
        "description": "Sends signal with data identical to the one received via `data`, but with incremented tag."
      },
      "a5ea47e0-1e3f-4f32-afc4-3f0ebe9c3030": {
        "type": "typeof `data`",
        "name": "bounced",
        "description": "Forwards the signal received through `data` when its tag was not iterable."
      }
    }
  },
  "implementations": {
    "es6": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "",
      "inputFunctions": {
        "4b2b80cb-8d64-40a5-ae06-342257b858cc": "const matches = /^(.*)\\:(\\d+)$/.exec(tag);\nif (matches !== null)\n  outputs.data(data, `${matches[1]}:${+matches[2] + 1}`);\nelse\n  outputs.bounced(data, tag);"
      }
    },
    "es6-node": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "",
      "inputFunctions": {
        "4b2b80cb-8d64-40a5-ae06-342257b858cc": "const matches = /^(.*)\\:(\\d+)$/.exec(tag);\nif (matches !== null)\n  outputs.data(data, `${matches[1]}:${+matches[2] + 1}`);\nelse\n  outputs.bounced(data, tag);"
      }
    }
  },
  "name": "flow/Tag incrementer",
  "attributes": {
    "locked": true
  },
  "keywords": {
    "simulated iteration": null,
    "fake iteration": null,
    "synchronization": null,
    "syncing": null
  }
}