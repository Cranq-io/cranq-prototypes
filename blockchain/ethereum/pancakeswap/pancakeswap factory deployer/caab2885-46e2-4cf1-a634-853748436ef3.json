{
  "name": "blockchain/ethereum/pancakeswap/pancakeswap factory deployer",
  "description": "Compiles and deploys a Pancake factory contract.\n\nNote, Pancace factory should be used together with a Pancake router contract.\n",
  "interface": {
    "inputs": {
      "2dd1939f-cbcf-4bfd-9076-1bcf32623d5c": {
        "type": "string",
        "name": "contract name",
        "description": "The name of the created contract. It must be a valid Solidity contract name (no spaces, special characters)."
      },
      "2ce2b32e-927f-41b3-bcab-d77769eb3da9": {
        "type": "string",
        "name": "fee setter",
        "description": "Receives the address that will have the permission to set an address where usage fees are sent. \n"
      },
      "c7708f4f-1b7d-4292-bdf6-a607378707b4": {
        "type": "typeof `credentials` of `deploy contract preset`",
        "name": "credentials"
      }
    },
    "outputs": {
      "2b7af6d6-aa19-4c89-9cba-5c8b4a8f6fb0": {
        "type": "typeof `events` of `deploy contract preset`",
        "name": "events"
      },
      "c756affd-6db5-4293-920b-ed329630f3c6": {
        "type": "typeof `source` of `deploy contract preset`",
        "name": "source"
      },
      "27ebe7c3-33de-4485-ba68-e659a8581cd0": {
        "type": "{\n    optional \"evmVersion\": string,\n    \"optimizer\": {\n        \"enabled\": boolean,\n        \"runs\": number\n    }\n}",
        "name": "compile settings"
      },
      "86c83cbf-ac3a-4a4e-bab8-1578bbdcb5ba": {
        "type": "typeof `error` of `deploy contract preset`",
        "name": "error"
      }
    }
  },
  "implementations": {
    "cranq": {
      "nodes": {
        "33a592d8-a575-455f-9037-4fd8ad016440": {
          "coordinates": [
            -226.1953125,
            1.90625
          ],
          "name": "forward contract data",
          "prototype": "ccd44557-20cf-4582-9c10-99bc31b22380"
        },
        "ada60902-1af2-444c-9767-d3aae9f9e29e": {
          "coordinates": [
            201.09201388888903,
            -3.651041666666515
          ],
          "name": "deploy contract preset",
          "prototype": "f4f89c90-1285-4803-b3c8-530254056164"
        },
        "139ca438-6408-42ab-8064-8d093abc9a73": {
          "coordinates": [
            -8,
            -80.8515625
          ],
          "name": "contract preset (ERC1155PresetMinterPauser)",
          "prototype": "c791825d-ced0-4354-b066-d8488511dd4b",
          "params": {
            "543f8ad2-7755-44f6-bc9b-e6208c87b15a": "{\n  \"name to replace\": \"ContractTemplate_PancakeFactory\",\n  \"compile settings\": {\n  \"includeRoots\": [],\n  \"solidityVersion\": \"v0.5.16+commit.9c3226ce\",\n    \"compileOptions\": {\n      \"optimizer\": {\"enabled\": true, \"runs\": 999999}\n    }\n},\n\"deploy settings\": {\n        \"gas\": 4000000\n    },\n  \"contract template\": \"\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/interfaces\\/IPancakeCallee.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeCallee {\\r\\n    function pancakeCall(\\r\\n        address sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/interfaces\\/IERC20.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/libraries\\/UQ112x112.sol\\r\\n\\r\\n\\r\\npragma solidity =0.5.16;\\r\\n\\r\\n\\/\\/ a library for handling binary fixed point numbers (https:\\/\\/en.wikipedia.org\\/wiki\\/Q_(number_format))\\r\\n\\r\\n\\/\\/ range: [0, 2**112 - 1]\\r\\n\\/\\/ resolution: 1 \\/ 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2**112;\\r\\n\\r\\n    \\/\\/ encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; \\/\\/ never overflows\\r\\n    }\\r\\n\\r\\n    \\/\\/ divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x \\/ uint224(y);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/libraries\\/Math.sol\\r\\n\\r\\n\\r\\npragma solidity =0.5.16;\\r\\n\\r\\n\\/\\/ a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    \\/\\/ babylonian method (https:\\/\\/en.wikipedia.org\\/wiki\\/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y \\/ 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y \\/ x + x) \\/ 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/libraries\\/SafeMath.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.5.0 <0.7.0;\\r\\n\\r\\n\\/\\/ a library for performing overflow-safe math, courtesy of DappHub (https:\\/\\/github.com\\/dapphub\\/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(y == 0 || (z = x * y) \\/ y == x, \\\"ds-math-mul-overflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/interfaces\\/IPancakeERC20.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/PancakeERC20.sol\\r\\n\\r\\n\\r\\npragma solidity =0.5.16;\\r\\n\\r\\n\\r\\n\\r\\ncontract PancakeERC20 is IPancakeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string public constant name = \\\"Pancake LPs\\\";\\r\\n    string public constant symbol = \\\"Cake-LP\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint256 public totalSupply;\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    \\/\\/ keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    constructor() public {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        require(deadline >= block.timestamp, \\\"Pancake: EXPIRED\\\");\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Pancake: INVALID_SIGNATURE\\\");\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/interfaces\\/IPancakePair.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/interfaces\\/IPancakeFactory.sol\\r\\n\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/PancakePair.sol\\r\\n\\r\\n\\r\\npragma solidity =0.5.16;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract PancakePair is IPancakePair, PancakeERC20 {\\r\\n    using SafeMath  for uint;\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public factory;\\r\\n    address public token0;\\r\\n    address public token1;\\r\\n\\r\\n    uint112 private reserve0;           \\/\\/ uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserve1;           \\/\\/ uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; \\/\\/ uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint public price0CumulativeLast;\\r\\n    uint public price1CumulativeLast;\\r\\n    uint public kLast; \\/\\/ reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    uint private unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'Pancake: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Pancake: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    constructor() public {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    \\/\\/ called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1) external {\\r\\n        require(msg.sender == factory, 'Pancake: FORBIDDEN'); \\/\\/ sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    \\/\\/ update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\r\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Pancake: OVERFLOW');\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; \\/\\/ overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            \\/\\/ * never overflows, and + overflow is desired\\r\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    \\/\\/ if fee is on, mint liquidity equivalent to 8\\/25 of the growth in sqrt(k)\\r\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\r\\n        address feeTo = IPancakeFactory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint _kLast = kLast; \\/\\/ gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\r\\n                uint rootKLast = Math.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast)).mul(8);\\r\\n                    uint denominator = rootK.mul(17).add(rootKLast.mul(8));\\r\\n                    uint liquidity = numerator \\/ denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\/\\/ this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) external lock returns (uint liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); \\/\\/ gas savings\\r\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint amount0 = balance0.sub(_reserve0);\\r\\n        uint amount1 = balance1.sub(_reserve1);\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; \\/\\/ gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\r\\n           _mint(address(0), MINIMUM_LIQUIDITY); \\/\\/ permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n        } else {\\r\\n            liquidity = Math.min(amount0.mul(_totalSupply) \\/ _reserve0, amount1.mul(_totalSupply) \\/ _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'Pancake: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); \\/\\/ reserve0 and reserve1 are up-to-date\\r\\n        emit Mint(msg.sender, amount0, amount1);\\r\\n    }\\r\\n\\r\\n    \\/\\/ this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); \\/\\/ gas savings\\r\\n        address _token0 = token0;                                \\/\\/ gas savings\\r\\n        address _token1 = token1;                                \\/\\/ gas savings\\r\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint liquidity = balanceOf[address(this)];\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; \\/\\/ gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = liquidity.mul(balance0) \\/ _totalSupply; \\/\\/ using balances ensures pro-rata distribution\\r\\n        amount1 = liquidity.mul(balance1) \\/ _totalSupply; \\/\\/ using balances ensures pro-rata distribution\\r\\n        require(amount0 > 0 && amount1 > 0, 'Pancake: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); \\/\\/ reserve0 and reserve1 are up-to-date\\r\\n        emit Burn(msg.sender, amount0, amount1, to);\\r\\n    }\\r\\n\\r\\n    \\/\\/ this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'Pancake: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); \\/\\/ gas savings\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Pancake: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        uint balance0;\\r\\n        uint balance1;\\r\\n        { \\/\\/ scope for _token{0,1}, avoids stack too deep errors\\r\\n        address _token0 = token0;\\r\\n        address _token1 = token1;\\r\\n        require(to != _token0 && to != _token1, 'Pancake: INVALID_TO');\\r\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); \\/\\/ optimistically transfer tokens\\r\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); \\/\\/ optimistically transfer tokens\\r\\n        if (data.length > 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);\\r\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\r\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        require(amount0In > 0 || amount1In > 0, 'Pancake: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        { \\/\\/ scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(25)));\\r\\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(25)));\\r\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'Pancake: K');\\r\\n        }\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    \\/\\/ force balances to match reserves\\r\\n    function skim(address to) external lock {\\r\\n        address _token0 = token0; \\/\\/ gas savings\\r\\n        address _token1 = token1; \\/\\/ gas savings\\r\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\r\\n    }\\r\\n\\r\\n    \\/\\/ force reserves to match balances\\r\\n    function sync() external lock {\\r\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ File: projects\\/exchange-protocol\\/contracts\\/PancakeFactory.sol\\r\\n\\r\\n\\r\\npragma solidity =0.5.16;\\r\\n\\r\\n\\r\\n\\r\\ncontract ContractTemplate_PancakeFactory is IPancakeFactory {\\r\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(PancakePair).creationCode));\\r\\n\\r\\n    address public feeTo;\\r\\n    address public feeToSetter;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public getPair;\\r\\n    address[] public allPairs;\\r\\n\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    constructor(address _feeToSetter) public {\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external view returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\r\\n        require(tokenA != tokenB, 'Pancake: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'Pancake: ZERO_ADDRESS');\\r\\n        require(getPair[token0][token1] == address(0), 'Pancake: PAIR_EXISTS'); \\/\\/ single check is sufficient\\r\\n        bytes memory bytecode = type(PancakePair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        IPancakePair(pair).initialize(token0, token1);\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair; \\/\\/ populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external {\\r\\n        require(msg.sender == feeToSetter, 'Pancake: FORBIDDEN');\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external {\\r\\n        require(msg.sender == feeToSetter, 'Pancake: FORBIDDEN');\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n}\\r\\n\"\n}"
          }
        },
        "bd686c0a-d2ae-44e9-bb62-26cbd244ef91": {
          "coordinates": [
            -23,
            88
          ],
          "name": "append uri parameter to empty array",
          "prototype": "9882ea6b-43da-4a1f-b660-689da949c8f2",
          "params": {
            "5cbbb232-d9b4-4d06-9db0-e548e44e43b6": "[]"
          }
        }
      },
      "connections": {
        "33a592d8-a575-455f-9037-4fd8ad016440": {
          "c3fcabea-63e8-48a2-b736-e7a9954cf5ca": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "741d010c-14a6-4dd1-b528-0d5386187bb7": {}
            },
            "139ca438-6408-42ab-8064-8d093abc9a73": {
              "0b28df10-b056-4666-ae14-2357d747f7b9": {}
            }
          },
          "3f67095a-501d-4010-b37d-4e1ece60e2f2": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "11c0a845-1293-4670-9390-0a0586122a6f": {}
            }
          },
          "9b746d54-f007-4bc0-9988-acb0a0a05cd5": {
            "bd686c0a-d2ae-44e9-bb62-26cbd244ef91": {
              "2d02022b-c114-4207-935e-11490a6c2926": {}
            }
          }
        },
        "139ca438-6408-42ab-8064-8d093abc9a73": {
          "e7a0df14-dc8c-41bd-8aba-367fdb468ce3": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "b53990d6-c237-4d59-9dbf-b2fa712181a7": {}
            }
          }
        },
        "bd686c0a-d2ae-44e9-bb62-26cbd244ef91": {
          "092ca265-7614-4182-9d9f-bd325c094abb": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "67510810-61e0-4c9d-b06d-10fbe7c4a740": {}
            }
          }
        }
      },
      "forwards": {
        "inputs": {
          "2dd1939f-cbcf-4bfd-9076-1bcf32623d5c": {
            "33a592d8-a575-455f-9037-4fd8ad016440": {
              "70da607a-8976-437b-b9e9-84cc63cd613b": {}
            }
          },
          "2ce2b32e-927f-41b3-bcab-d77769eb3da9": {
            "33a592d8-a575-455f-9037-4fd8ad016440": {
              "54c357a1-045e-4817-beda-0017a586a499": {}
            }
          },
          "c7708f4f-1b7d-4292-bdf6-a607378707b4": {
            "33a592d8-a575-455f-9037-4fd8ad016440": {
              "507a0b1a-b9eb-4e67-a64d-47b405e17422": {}
            }
          }
        },
        "outputs": {
          "86c83cbf-ac3a-4a4e-bab8-1578bbdcb5ba": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "b771d246-9110-4c33-82bf-dfb979e66235": {}
            }
          },
          "2b7af6d6-aa19-4c89-9cba-5c8b4a8f6fb0": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "2acecfad-46ec-48f8-80ea-332931523eef": {}
            }
          },
          "c756affd-6db5-4293-920b-ed329630f3c6": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "41ca2dbd-2701-45d8-8411-8dea422e9563": {}
            }
          },
          "27ebe7c3-33de-4485-ba68-e659a8581cd0": {
            "ada60902-1af2-444c-9767-d3aae9f9e29e": {
              "147727db-184c-41df-90e3-e4ab656781a2": {}
            }
          }
        }
      }
    }
  },
  "iconId": "abac34e3-c832-4c7b-b045-62f82ebc3ddb",
  "original": "5edf0515-2d82-4cd8-ad5d-2da36a51ace3",
  "keywords": {
    "erc1155": null,
    "token": null
  },
  "attributes": {
    "locked": true
  }
}
