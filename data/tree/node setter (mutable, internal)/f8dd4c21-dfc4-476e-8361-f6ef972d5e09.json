{
  "description": "See data/tree/node setter",
  "interface": {
    "inputs": {
      "71cc8f4a-8801-4abc-9352-21125bb24296": {
        "type": "{\"tree\":any[] or {string:any},\"path\":(string or number)[],\"node\":any}",
        "name": "tree & path & node"
      }
    },
    "outputs": {
      "504be2a1-59dc-4120-bd4b-dc2a70c75d78": {
        "type": "any[] or {string:any}",
        "name": "written"
      }
    }
  },
  "implementations": {
    "es6": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "",
      "inputFunctions": {
        "71cc8f4a-8801-4abc-9352-21125bb24296": "const {tree, path} = data;\nconst length = path.length - 1;\nlet parent = tree;\nfor (let i=0; i<length; i++) {\n  const key = path[i];\n  let node = parent[key];\n  if (node instanceof Object) {\n    parent = node;\n  } else {\n    // looking ahead to determine parent type\n    switch (typeof path[i + 1]) {\n    case \"string\":\n      node = {};\n      break;\n    case \"number\":\n      node = [];\n      break;\n    }\n    parent[key] = node;\n    parent = node;\n  }\n}\nconst lastPathComponent = path[length];\nparent[lastPathComponent] = data.node;\noutputs.written(null, tag);"
      }
    },
    "es6-node": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "",
      "inputFunctions": {
        "71cc8f4a-8801-4abc-9352-21125bb24296": "const {tree, path} = data;\nconst length = path.length - 1;\nlet parent = tree;\nfor (let i=0; i<length; i++) {\n  const key = path[i];\n  let node = parent[key];\n  if (node instanceof Object) {\n    parent = node;\n  } else {\n    // looking ahead to determine parent type\n    switch (typeof path[i + 1]) {\n    case \"string\":\n      node = {};\n      break;\n    case \"number\":\n      node = [];\n      break;\n    }\n    parent[key] = node;\n    parent = node;\n  }\n}\nconst lastPathComponent = path[length];\nparent[lastPathComponent] = data.node;\noutputs.written(null, tag);"
      }
    }
  },
  "name": "data/tree/Node setter (mutable, internal)",
  "attributes": {
    "internal": true,
    "locked": true
  }
}
