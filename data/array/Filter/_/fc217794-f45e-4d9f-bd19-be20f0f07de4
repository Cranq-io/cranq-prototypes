{
    "description":  "",
    "interface":  {
                      "inputs":  {
                                     "array":  {
                                                   "type":  "any[]"
                                               },
                                     "index \u0026 include item":  {
                                                                       "type":  "{\"index\":number,\"include item\":boolean}"
                                                                   }
                                 },
                      "outputs":  {
                                      "filtered":  {
                                                       "type":  "typeof(array)"
                                                   },
                                      "index":  {
                                                    "type":  "number"
                                                },
                                      "item":  {
                                                   "type":  "typeof(array)[number]"
                                               }
                                  }
                  },
    "implementations":  {
                            "es6-node":  {
                                             "cleanupFunction":  "",
                                             "dependencies":  {

                                                              },
                                             "initFunction":  "state.filteringsByTag = state.filteringsByTag || new Map();",
                                             "inputFunctions":  {
                                                                    "array":  "const {length} = data;\nif (length) {\n  state.filteringsByTag.set(tag, {\n    array: data,\n    result: [],\n    cursor: 0,\n    length\n  });\n  for (let i=0; i\u003clength; i++) {\n    const itemTag = `${tag}:${i}`;\n    outputs.item(data[i], itemTag);\n    outputs.index(i, itemTag);\n  }\n} else {\n  outputs.filtered([], tag);\n}",
                                                                    "index \u0026 include item":  "const filteringTag = tag.substr(0, tag.lastIndexOf(\":\"));\nconst filtering = state.filteringsByTag.get(filteringTag);\nconst {result} = filtering;\nresult[data.index] = data[\"include item\"];\nif (++filtering.cursor === filtering.length) {\n  state.filteringsByTag.delete(filteringTag);\n  const {length, array} = filtering;\n  outputs.filtered(array.filter((v, i)=\u003eresult[i]), filteringTag);\n}"
                                                                }
                                         }
                        },
    "name":  "data/array/Filter/_"
}