{
  "name": "blockchain/ethereum/actions/Smart contract deployer (simplified)",
  "interface": {
    "inputs": {
      "ffc1da5d-a6da-4831-a9a5-3c97233a33b4": {
        "description": "",
        "type": "any",
        "name": "state"
      },
      "61d69769-9488-4239-854b-7ed3a9991ca6": {
        "type": "{\n  \"cwd\": string,\n  \"wallet-private-key\": string,\n  \"api-key\": string,\n  \"contract\": \"single-nft\"\n}",
        "name": "params"
      }
    },
    "outputs": {
      "3e6924e9-d8f9-48c0-b9e3-6e4c86dada99": {
        "type": "typeof `state`",
        "name": "state"
      }
    }
  },
  "implementations": {
    "cranq": {
      "nodes": {
        "e1f35c80-f7c4-4f83-a4cd-459c338d3edc": {
          "coordinates": [
            111.50242513020834,
            38.837500000000034
          ],
          "name": "create smart contract",
          "prototype": "07af5abe-408d-4e83-8e38-79b79ecb26fc",
          "params": {}
        },
        "2ab4feae-fd03-4d9d-91be-8223fc083294": {
          "coordinates": [
            -82.50242513020834,
            -91.83749999999998
          ],
          "name": "prepare params",
          "prototype": "359e8070-aed1-459b-a6d8-722f1d27378b",
          "params": {
            "9bd88c07-0858-4ead-b615-069284f0db34": "{\n  \"create-folders\": {\n    \"create-working-folder\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"working-folder-created\"],\n      \"message\": \"Creating working folder...\",\n      \"path\": \".\"\n    },\n    \"create-contracts-folder\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"hardhat\", \"contracts-folder-created\"],\n      \"message\": \"Creating `contracts` folder for Hardhat...\",\n      \"path\": \"contracts\"\n    },\n    \"create-scripts-folder\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"hardhat\", \"scripts-folder-created\"],\n      \"message\": \"Creating `scripts` folder for Hardhat...\",\n      \"path\": \"scripts\"\n    }\n  },\n  \"install-dependencies\": {\n    \"init-package\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"npm\", \"package-initialized\"],\n      \"message\": \"Initializing NPM package...\",\n      \"command\": \"npm init -y\"\n    },\n    \"install-hardhat\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"hardhat\", \"installed\"],\n      \"message\": \"Installing Hardhat...\",\n      \"command\": \"npm install --save-dev hardhat\"\n    },\n    \"install-dotenv\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"dotenv\", \"installed\"],\n      \"message\": \"Installing dotenv...\",\n      \"command\": \"npm install dotenv --save\"\n    },\n    \"install-ether\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"etherjs\", \"installed\"],\n      \"message\": \"Installing Ether.js...\",\n      \"command\": \"npm install --save-dev @nomiclabs/hardhat-ethers ethers@^5.0.0\"\n    },\n    \"install-contracts\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"openzeppelin\", \"contracts\", \"installed\"],\n      \"message\": \"Installing OpenZeppelin contracts...\",\n      \"command\": \"npm install @openzeppelin/contracts\"\n    }\n  },\n  \"create-files\": {\n    \"write-api-url\": {\n      \"name\": \"API_URL\",\n      \"value\": \"\",\n      \"append\": {\n        \"cwd\": \"./temp\",\n        \"result-path\": [\".env\", \"alchemy\", \"api-url-written\"],\n        \"message\": \"Writing API URL to .env file...\",\n        \"path\": \".env\"\n      }\n    },\n    \"write-private-key\": {\n      \"name\": \"PRIVATE_KEY\",\n      \"value\": \"\",\n      \"append\": {\n        \"cwd\": \"./temp\",\n        \"result-path\": [\".env\", \"metamask\", \"private-key-written\"],\n        \"message\": \"Writing private key to .env file...\",\n        \"path\": \".env\"\n      }\n    },\n    \"create-hardhat-config\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"hardhat\", \"config-created\"],\n      \"message\": \"Creating Hardhat config...\",\n      \"path\": \"./hardhat.config.js\",\n      \"text\": \"/**\\n* @type import('hardhat/config').HardhatUserConfig\\n*/\\nrequire('dotenv').config();\\nrequire(\\\"@nomiclabs/hardhat-ethers\\\");\\nconst { API_URL, PRIVATE_KEY } = process.env;\\nmodule.exports = {\\n   solidity: \\\"0.8.0\\\",\\n   defaultNetwork: \\\"ropsten\\\",\\n   networks: {\\n      hardhat: {},\\n      ropsten: {\\n         url: API_URL,\\n         accounts: [`0x${PRIVATE_KEY}`]\\n      }\\n   },\\n}\"\n    },\n    \"create-contract\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"blockchain\", \"erc721\", \"single-nft\", \"contract-created\"],\n      \"message\": \"Creating contract...\",\n      \"path\": \"contracts/MyNFT.sol\",\n      \"text\": \"//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\ncontract MyNFT is ERC721URIStorage, Ownable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    constructor() public ERC721(\\\"MyNFT\\\", \\\"NFT\\\") {}\\n\\n    function mintNFT(address recipient, string memory tokenURI)\\n        public onlyOwner\\n        returns (uint256)\\n    {\\n        _tokenIds.increment();\\n\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(recipient, newItemId);\\n        _setTokenURI(newItemId, tokenURI);\\n\\n        return newItemId;\\n    }\\n}\"\n    },\n    \"write-deploy\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"hardhat\", \"deploy-script-created\"],\n      \"message\": \"Creating deploy script...\",\n      \"path\": \"scripts/deploy.js\",\n      \"text\": \"async function main() {\\n  const MyNFT = await ethers.getContractFactory(\\\"MyNFT\\\")\\n\\n  // Start deployment, returning a promise that resolves to a contract object\\n  const myNFT = await MyNFT.deploy()\\n  console.log(\\\"Contract deployed to address:\\\", myNFT.address)\\n}\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error)\\n    process.exit(1)\\n  })\"\n    }\n  },\n  \"deploy-contract\": {\n    \"compile-contract\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"hardhat\", \"contract-compiled\"],\n      \"message\": \"Compiling smart contract...\",\n      \"command\": \"npx hardhat compile\"\n    },\n    \"deploy-contract\": {\n      \"cwd\": \"./temp\",\n      \"result-path\": [\"hardhat\", \"contract-deployed\"],\n      \"message\": \"Deploying smart contract...\",\n      \"command\": \"npx hardhat run scripts/deploy.js --network ropsten\",\n      \"regex\": \"Contract deployed to address: (0x[a-zA-Z0-9]+)\"\n    }\n  }\n}",
            "71ef594f-2661-492f-b6e6-278e6ce94c3d": "{\n  \"create-files.write-api-url.value\": \"api-key\",\n  \"create-files.write-private-key.value\": \"wallet-private-key\",\n  \"create-folders.create-working-folder.cwd\": \"cwd\",\n  \"create-folders.create-contracts-folder.cwd\": \"cwd\",\n  \"create-folders.create-scripts-folder.cwd\": \"cwd\",\n  \"install-dependencies.init-package.cwd\": \"cwd\",\n  \"install-dependencies.install-hardhat.cwd\": \"cwd\",\n  \"install-dependencies.install-dotenv.cwd\": \"cwd\",\n  \"install-dependencies.install-ether.cwd\": \"cwd\",\n  \"install-dependencies.install-contracts.cwd\": \"cwd\",\n  \"create-files.write-api-url.append.cwd\": \"cwd\",\n  \"create-files.write-private-key.append.cwd\": \"cwd\",\n  \"create-files.create-hardhat-config.cwd\": \"cwd\",\n  \"create-files.create-contract.cwd\": \"cwd\",\n  \"create-files.write-deploy.cwd\": \"cwd\",\n  \"deploy-contract.compile-contract.cwd\": \"cwd\",\n  \"deploy-contract.deploy-contract.cwd\": \"cwd\"\n}"
          }
        },
        "44c47f40-defe-4414-a734-6ae7469c8337": {
          "coordinates": [
            -185.50242513020834,
            103.16250000000002
          ],
          "name": "forwarder (double)",
          "prototype": "9067c53e-399e-4f28-a6ed-26e987ab2418"
        }
      },
      "connections": {
        "2ab4feae-fd03-4d9d-91be-8223fc083294": {
          "016df9f6-e555-4594-b84f-ca1e9401fae8": {
            "e1f35c80-f7c4-4f83-a4cd-459c338d3edc": {
              "46aa769a-35f2-4021-8125-3a934c4542a4": {}
            }
          }
        },
        "44c47f40-defe-4414-a734-6ae7469c8337": {
          "069a212d-9cea-4987-be45-e0079a13d96f": {
            "e1f35c80-f7c4-4f83-a4cd-459c338d3edc": {
              "25604f1f-6fff-442f-acde-acfc7a3be14e": {}
            }
          },
          "d1295197-1962-4680-a037-5890f2175bb9": {
            "2ab4feae-fd03-4d9d-91be-8223fc083294": {
              "29b0d82b-2f8d-432c-81a5-b0cdf2c4f383": {}
            }
          }
        }
      },
      "forwards": {
        "inputs": {
          "ffc1da5d-a6da-4831-a9a5-3c97233a33b4": {
            "44c47f40-defe-4414-a734-6ae7469c8337": {
              "e76062c0-e298-4443-a187-94cbd4b3bc74": {}
            }
          },
          "61d69769-9488-4239-854b-7ed3a9991ca6": {
            "44c47f40-defe-4414-a734-6ae7469c8337": {
              "7af76a3e-ed65-41b9-9f9d-1a4593c5bf69": {}
            }
          }
        },
        "outputs": {
          "3e6924e9-d8f9-48c0-b9e3-6e4c86dada99": {
            "e1f35c80-f7c4-4f83-a4cd-459c338d3edc": {
              "c4f2da1e-2250-4d46-aaf3-936d50d2dde3": {}
            }
          }
        }
      }
    }
  },
  "attributes": {
    "locked": true
  }
}