{
    "description":  "",
    "interface":  {
                      "inputs":  {
                                     "array \u0026 initial":  {
                                                                  "type":  "{\"array\":any[],\"initial\":any}"
                                                              },
                                     "part reduced":  {
                                                          "type":  "typeof(array \u0026 initial)[\"initial\"]"
                                                      }
                                 },
                      "outputs":  {
                                      "reduced":  {
                                                      "type":  "typeof(array \u0026 initial)[\"initial\"]"
                                                  },
                                      "item":  {
                                                   "type":  "typeof(array \u0026 initial)[\"array\"][number]"
                                               },
                                      "part reduced":  {
                                                           "type":  "typeof(array \u0026 initial)[\"initial\"]"
                                                       }
                                  }
                  },
    "implementations":  {
                            "es6-node":  {
                                             "cleanupFunction":  "",
                                             "dependencies":  {

                                                              },
                                             "initFunction":  "state.reductionsByTag = state.reductionsByTag || new Map();\nstate.copy = (value) =\u003e (value instanceof Array)\n    ? [...value] : (value instanceof Object)\n      ? {...value} : value;",
                                             "inputFunctions":  {
                                                                    "array \u0026 initial":  "const {array, initial} = data;\nconst {length} = array;\nconst result = state.copy(initial);\nif (length) {\n  state.reductionsByTag.set(tag, {\n    result,\n    cursor: 0,\n    length\n  });\n  outputs[\"part reduced\"](result, `${tag}:0`);\n  for (let i=0; i\u003clength; i++) {\n    const itemTag = `${tag}:${i}`;\n    outputs.item(array[i], itemTag);\n  }\n} else {\n  outputs.reduced(result, tag);\n}",
                                                                    "part reduced":  "const reductionTag = tag.substr(0, tag.lastIndexOf(\":\"));\nconst reduction = state.reductionsByTag.get(reductionTag);\nif (++reduction.cursor === reduction.length) {\n  // Reduction finished\n  state.reductionsByTag.delete(reductionTag);\n  outputs.reduced(data, reductionTag);\n} else {\n  reduction.result = data;\n  outputs[\"part reduced\"](data, `${reductionTag}:${reduction.cursor}`);\n}"
                                                                }
                                         }
                        },
    "name":  "data/array/Reducer/_"
}