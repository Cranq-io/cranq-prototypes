{
    "description":  "Flattens a tree into a flat dictionary with keys created by prepending parent keys and a delimiter to child keys recursively.",
    "interface":  {
                      "inputs":  {
                                     "tree":  {
                                                  "description":  "The tree to flatten",
                                                  "type":  "tree"
                                              },
                                     "delimiter":  {
                                                       "description":  "The delimiter to use when prepending parent keys to child keys",
                                                       "type":  "string"
                                                   }
                                 },
                      "outputs":  {
                                      "flattened":  {
                                                        "description":  "The flat dictionary",
                                                        "type":  "dictionary"
                                                    }
                                  }
                  },
    "implementations":  {
                            "es6-node":  {
                                             "cleanupFunction":  "",
                                             "dependencies":  {

                                                              },
                                             "initFunction":  "",
                                             "inputFunctions":  {
                                                                    "tree":  "function flatten(tree, baseKey = \"\", delimiter = \".\") {\n  function flattenToKeyValueList(tree, baseKey = \"\") {\n    return Array.isArray(tree)\n      ? flattenToKeyValueList( // convert to object with numeric keys then proceed as usual\n        tree.reduce((acc, value, index) =\u003e ({ ...acc, ...({[index]: value})}), {}),\n        baseKey\n      )\n      : Object.entries(tree).flatMap(([key, value]) =\u003e {\n        const compoundKey = `${baseKey ? `${baseKey}${delimiter}` : \"\"}${key}`;\n        if (typeof value === \"object\" \u0026\u0026 value !== null) {\n          return flattenToKeyValueList(value, compoundKey);\n        }\n        return [compoundKey, value];\n      });\n  }\n\n  function fromKeyValueList(list) {\n    return list.reduce((acc, curr, index, source) =\u003e {\n      if (index % 2 === 1) { // every second is value, process it\n        acc[source[index - 1]] = curr;\n      }\n      return acc;\n    }, {});\n  }\n\n  return fromKeyValueList(flattenToKeyValueList(tree));\n}\n\noutputs.flattened(flatten(data, \"\", params.delimiter), tag);"
                                                                }
                                         }
                        },
    "name":  "data/tree/Flattener"
}