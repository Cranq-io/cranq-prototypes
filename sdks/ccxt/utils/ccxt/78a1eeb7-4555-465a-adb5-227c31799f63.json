{
  "implementations": {
    "es6-node": {
      "dependencies": {
        "npm": {
          "ccxt": {
            "description": ""
          }
        }
      },
      "inputFunctions": {
        "faa04647-7b0d-4187-86ff-d39034e4b0c4": "const ccxt = require (\"ccxt\")\r\nconst {parameters, name} = data; \r\nconst {query, exchange} = parameters;\r\nconst {symbol, symbols, code, timeframe, since, limit} = query;\r\nconst params = query.params || {};\r\n\r\ntry {\r\n  const xchange = new ccxt[exchange.id];\r\n  if (name === \"loadMarkets\") {\r\n    xchange\r\n    .loadMarkets()\r\n    .then((result)=> outputs.data(result, tag))\r\n    .catch((er)=> outputs.error({error: \"loadMarkets call was not successful.\", details: er.toString()}, tag));\r\n  }\r\n  else {\r\n    if (xchange.has[name]){\r\n      switch (name) {\r\n        case \"fetchOrderBook\":\r\n          xchange\r\n          .fetchOrderBook(symbol, limit, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchOrderBook call was not successful.\", details: er.toString()}, tag));\r\n          break;\r\n        case \"fetchOrderBooks\":\r\n          xchange\r\n          .fetchOrderBooks(symbols, limit, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchOrderBooks call was not successful.\", details: er.toString()}, tag));\r\n          break;\r\n        case \"fetchTicker\":\r\n          xchange\r\n          .fetchTicker(symbol, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchTicker call was not successful.\", details: er.toString()}, tag));\r\n          break;\r\n        case \"fetchTickers\":\r\n          xchange\r\n          .fetchTickers(symbols, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchTickers call was not successful.\", details: er.toString()}, tag));\r\n          break;\r\n        case \"fetchOHLCV\":\r\n          xchange\r\n          .fetchOHLCV(symbol, timeframe, since, limit, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchOHLCV call was not successful.\", details: er.toString()}, tag));\r\n          break;\r\n        case \"fetchTrades\":\r\n          xchange\r\n          .fetchTrades (symbol, since, limit, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchTrades  call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchTime\":\r\n          xchange\r\n          .fetchTime (params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchTime  call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchStatus\":\r\n          xchange\r\n          .fetchStatus (params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchStatus  call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchBorrowRate\":\r\n          xchange\r\n          .fetchBorrowRate(code, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchBorrowRate call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchBorrowRates\":\r\n          xchange\r\n          .fetchBorrowRates(params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchBorrowRates call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchBorrowRatesPerSymbol\":\r\n          xchange\r\n          .fetchBorrowRatesPerSymbol(params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchBorrowRatesPerSymbol call was not successful.\", details: er.toString()}, tag));\r\n          break;\r\n        case \"fetchBorrowRateHistory\":\r\n          xchange\r\n          .fetchBorrowRateHistory(code, since, limit, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchBorrowRateHistory call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchMarketLeverageTiers\":\r\n          xchange\r\n          .fetchMarketLeverageTiers(symbol, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchMarketLeverageTiers call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchLeverageTiers\":\r\n          xchange\r\n          .fetchLeverageTiers(symbols, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchLeverageTiers call was not successful.\", details: er.toString()}, tag));\r\n          break;\r\n        case \"fetchFundingRate\":\r\n          xchange\r\n          .fetchFundingRate(symbol, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchFundingRate call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchFundingRates\":\r\n          xchange\r\n          .fetchFundingRates(symbols, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchFundingRates call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchFundingRateHistory\":\r\n          xchange\r\n          .fetchFundingRateHistory(symbol, since, limit, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchFundingRateHistory call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchOpenInterestHistory\":\r\n          xchange\r\n          .fetchOpenInterestHistory(symbol, timeframe, since, limit, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchOpenInterestHistory call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        case \"fetchPositionsRisk\":\r\n          xchange\r\n          .fetchPositionsRisk(symbols, params)\r\n          .then((result)=> outputs.data(result, tag))\r\n          .catch((er)=> outputs.error({error: \"fetchPositionsRisk call was not successful.\", details: er.toString()}, tag));\r\n          break; \r\n        default:\r\n          outputs.error({error: \"Invalid action name: \" + bane}, tag)\r\n      }\r\n    }\r\n    else {\r\n      outputs.error({error: `Exchange with id: ${exchange.id} does not support ${name}`}, tag)\r\n    }\r\n  }\r\n} catch (e){\r\n  outputs.error({error: `Unexpected error on exhange with id: ${exchange.id}`, details: e.toString()}, tag)\r\n}\r\n"
      }
    }
  },
  "interface": {
    "inputs": {
      "faa04647-7b0d-4187-86ff-d39034e4b0c4": {
        "type": "{\n  \"name\": (\"loadMarkets\" or \"fetchOrderBook\" or \"fetchOrderBooks\" or \"fetchTicker\" or \"fetchTickers\" or \"fetchOHLCV\" or \"fetchTrades\" or \"fetchTime\" or \"fetchStatus\" or \"fetchBorrowRate\" or \"fetchBorrowRates\" or \"fetchBorrowRatesPerSymbol\" or \"fetchBorrowRateHistory\" or \"fetchMarketLeverageTiers\" or \"fetchFundingRate\" or \"fetchFundingRateHistory \" or \"fetchOpenInterestHistory\" or \"fetchPositionsRisk\"),\n  \"parameters\" :{\n     \"exchange\": {\n       \"id\": string\n    },\n   \"query\": any\n  }\n}",
        "name": "action"
      }
    },
    "outputs": {
      "a9ed491a-2114-43b4-bb91-45b4b56c3bbb": {
        "type": "any",
        "name": "data"
      },
      "de97ff64-6274-4fd2-af01-2a8e652a2188": {
        "type": "{\n  \"error\": string,\n  optional \"details\": any\n}",
        "name": "error"
      }
    }
  },
  "name": "sdks/ccxt/utils/ccxt",
  "original": "6ecf3c10-9070-45e5-bcfe-0bf3599fe81f",
  "keywords": {
    "": null
  },
  "description": "Integrates the ccxt public api.\n\nhttps://docs.ccxt.com/en/latest/manual.html#public-api",
  "iconId": "7d4b9ff9-dbdc-44e1-a901-cd9d869db931",
  "attributes": {
    "locked": true
  }
}
