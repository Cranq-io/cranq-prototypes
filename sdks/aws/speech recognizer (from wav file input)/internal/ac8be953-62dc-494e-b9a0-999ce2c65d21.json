{
  "implementations": {
    "es6-node": {
      "inputFunctions": {
        "a15cf573-9e68-4fc6-ac40-67a4acbf0c57": "const {\r\n  TranscribeStreamingClient,\r\n  StartStreamTranscriptionCommand,\r\n} = require(\"@aws-sdk/client-transcribe-streaming\");\r\nconst {\r\n  createReadStream\r\n} = require(\"fs\");\r\nconst { PassThrough } = require('stream');\r\nconst wav = require('wav');\r\n\r\nconst {\r\n  fileName,\r\n    params: {\r\n      region,\r\n      language = \"en-US\",\r\n      accessKeyId,\r\n      secretAccessKey,\r\n    }\r\n} = data;\r\n\r\nasync function startRequest() {\r\n    const reader = new wav.Reader();\r\n    \r\n    const highWaterMark = 1024;\r\n\r\n    const audioSource = createReadStream(fileName, {highWaterMark});\r\n    audioSource.pipe(reader);\r\n\r\n    reader.on('format', async function (format) {\r\n       const {\r\n            sampleRate,\r\n            channels,\r\n            bitDepth\r\n        } = format;\r\n\r\n        if (bitDepth > 16) {\r\n            throw new Error(\"Bit depth is bigger than 16, please use less or equal than 16 bit, in your format.\")\r\n        }\r\n    \r\n        const MediaSampleRateHertz = sampleRate * channels;\r\n        const LanguageCode = language;\r\n        const MediaEncoding = 'pcm';\r\n        const audioPayloadStream = new PassThrough({highWaterMark});\r\n        reader.pipe(audioPayloadStream);\r\n\r\n        const client = new TranscribeStreamingClient({\r\n            region,\r\n            credentials: {\r\n                accessKeyId,\r\n                secretAccessKey,\r\n            },\r\n        });\r\n\r\n        const params = {\r\n            LanguageCode,\r\n            MediaEncoding,\r\n            MediaSampleRateHertz,\r\n            AudioStream: (async function* () {\r\n                for await (const chunk of audioPayloadStream) {\r\n                    yield {\r\n                        AudioEvent: {\r\n                            AudioChunk: chunk,\r\n                        },\r\n                    };\r\n                }\r\n            })(),\r\n        };\r\n        const command = new StartStreamTranscriptionCommand(params);\r\n        \r\n        let response;\r\n\r\n        try{\r\n            response = await client.send(command);\r\n        } catch (err) {\r\n            outputs['error']({\r\n              error: err\r\n            }, tag);\r\n            return;\r\n        }\r\n        \r\n        let message = {};\r\n\r\n        try {\r\n            for await (const event of response.TranscriptResultStream) {\r\n                if (event.TranscriptEvent?.Transcript?.Results?.length > 0) {\r\n                    outputs['current'](JSON.stringify(event))\r\n                    message = event;\r\n                }\r\n            }\r\n            outputs['result'](JSON.stringify(message), tag)\r\n        } catch (err) {\r\n            outputs['error']({\r\n              error: err\r\n            }, tag)\r\n        }\r\n    });\r\n}\r\nstartRequest();"
      },
      "dependencies": {
        "npm": {
          "@aws-sdk/client-transcribe-streaming": {
            "description": ""
          },
          "fs": {
            "description": ""
          },
          "stream": {
            "description": ""
          },
          "wav": {
            "description": ""
          }
        }
      }
    }
  },
  "interface": {
    "inputs": {
      "a15cf573-9e68-4fc6-ac40-67a4acbf0c57": {
        "type": "{\"fileName\": string, \"params\": {\"accessKeyId\": string, \"secretAccessKey\": string, \"region\": string, optional \"language\": string}}",
        "name": "params"
      }
    },
    "outputs": {
      "d1fff01f-b192-4657-a239-56d29eabbc68": {
        "type": "{\"TranscriptEvent\": {\"Transcript\": {\"Results\": {\"Alternatives\": {\"Items\": {\"Confidence\": number, \"Content\": string, \"EndTime\": number, \"StartTime\": number, \"Type\": string, \"VocabularyFilterMatch\": boolean}[], \"Transcript\": string}[], \"ChannelId\": string, \"EndTime\": number, \"IsPartial\": boolean, \"ResultId\": string, \"StartTime\": number}[]}}}",
        "name": "result",
        "description": ""
      },
      "49c0b9e1-d375-439b-bad0-07ae0141f09e": {
        "type": "{\"TranscriptEvent\": {\"Transcript\": {\"Results\": {\"Alternatives\": {\"Items\": {\"Confidence\": number, \"Content\": string, \"EndTime\": number, \"StartTime\": number, \"Type\": string, \"VocabularyFilterMatch\": boolean}[], \"Transcript\": string}[], \"ChannelId\": string, \"EndTime\": number, \"IsPartial\": boolean, \"ResultId\": string, \"StartTime\": number}[]}}}",
        "name": "current"
      },
      "8ef25d06-2f4c-45ee-a81a-d22ad5164b3d": {
        "type": "{\"error\": string}",
        "name": "error"
      }
    }
  },
  "name": "sdks/aws/Speech recognizer (from WAV file input)/Internal",
  "iconId": "abac34e3-c832-4c7b-b045-62f82ebc3ddb",
  "attributes": {
    "internal": true,
    "locked": true
  }
}
