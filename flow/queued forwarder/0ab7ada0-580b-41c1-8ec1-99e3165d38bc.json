{
  "description": "Forwards data received via `data` in the order defined by the tags of the signals received via `reference`.\n\nQueues `reference` inputs until the first N signals have all received matching inputs via `data` then releases them one-by-one via `data` (output).\n\nUsed to signal sequence after asynchronous transformations.\n\nExample:\n1. \"A\"@0 received via `reference`\n2. \"B\"@1 received via `reference`\n3. \"b\"@1 received via ",
  "interface": {
    "inputs": {
      "f8530cfa-8bf3-43c0-a3a6-ead766852ef1": {
        "description": "Receives data to be forwarded.",
        "type": "any",
        "name": "data"
      },
      "70a488b9-2e95-4dca-8fae-266d8ac65dfc": {
        "description": "Receives signals that define the order of the forwarded signals, based on their tags.",
        "type": "any",
        "name": "reference"
      }
    },
    "outputs": {
      "a9f0987d-4f2c-4f3b-be77-7f57b6a20ee5": {
        "description": "Sends forwarded data.",
        "type": "typeof `data`",
        "name": "data"
      }
    }
  },
  "implementations": {
    "es6": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "state.dataByTag = state.dataByTag || new Map();\nstate.queue = state.queue || [];\nconst {dataByTag, queue} = state;\nstate.flush = () => {\n  while (dataByTag.has(queue[0])) {\n    const tag = queue.shift();\n    const data = dataByTag.get(tag);\n    dataByTag.delete(tag);\n    outputs.data(data, tag);\n  }\n}",
      "inputFunctions": {
        "f8530cfa-8bf3-43c0-a3a6-ead766852ef1": "state.dataByTag.set(tag, data);\nstate.flush();",
        "70a488b9-2e95-4dca-8fae-266d8ac65dfc": "state.queue.push(tag);\nstate.flush();"
      }
    },
    "es6-node": {
      "cleanupFunction": "",
      "dependencies": {},
      "initFunction": "state.dataByTag = state.dataByTag || new Map();\nstate.queue = state.queue || [];\nconst {dataByTag, queue} = state;\nstate.flush = () => {\n  while (dataByTag.has(queue[0])) {\n    const tag = queue.shift();\n    const data = dataByTag.get(tag);\n    dataByTag.delete(tag);\n    outputs.data(data, tag);\n  }\n}",
      "inputFunctions": {
        "f8530cfa-8bf3-43c0-a3a6-ead766852ef1": "state.dataByTag.set(tag, data);\nstate.flush();",
        "70a488b9-2e95-4dca-8fae-266d8ac65dfc": "state.queue.push(tag);\nstate.flush();"
      }
    }
  },
  "name": "flow/Queued forwarder",
  "keywords": {
    "sequence": null,
    "order": null,
    "sort": null,
    "restore": null
  },
  "iconId": "7341443a-8a0a-4a83-b302-effdb497c0f3",
  "attributes": {
    "locked": true
  }
}
