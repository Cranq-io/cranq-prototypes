{"description":"","interface":{"inputs":{"b176e769-b2ab-45ad-b333-1886030931e3":{"type":"{\"verb\":\"GET\" or \"POST\" or \"PUT\" or \"PATCH\" or \"DELETE\",\"url\":string,\"headers\":{string:string},\"body\":any}","name":"verb & url & headers & body"}},"outputs":{"2b56fb5f-6bc5-4f51-8f62-b08957bec6a2":{"type":"{\"status\":string,\"headers\":{string:string},\"body\":string}","name":"response"},"741875aa-5ef2-4704-a593-f26f3eeddbfa":{"type":"string","name":"error"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"b176e769-b2ab-45ad-b333-1886030931e3":"const {verb, url, headers = {}, body} = data;\nconst {port, protocol, hostname, pathname, search} = new URL(url);\nconst isHttps = protocol === \"https:\";\nconst {request} = isHttps ? require(\"https\") : require(\"http\");\nconst options = {\n  hostname,\n  port: port || isHttps ? 443 : 80,\n  path: pathname + search,\n  method: verb,\n  headers: body !== undefined\n    ? {\n      ...headers,\n      \"Content-Length\": Buffer.byteLength(body)\n    }\n    : headers\n};\nconst resultChunks = [];\nconst req = request(options, (response) => {\n  response.on(\"data\", (chunk) => {\n    resultChunks.push(String(chunk));\n  });\n  response.on(\"end\", () => {\n    outputs.response({\n      status: response.statusCode,\n      headers: response.headers,\n      body: resultChunks.join(\"\")\n    }, tag);\n  });\n});\nreq.on(\"error\", (error) => {\n  outputs.error({error: String(error)}, tag);\n});\nif (body !== undefined) {\n  req.write(body);\n}\nreq.end();\n"}}},"name":"io/http/Request dispatcher/_","attributes":{"internal":true}}