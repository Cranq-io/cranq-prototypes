{
  "implementations": {
    "es6-node": {
      "inputFunctions": {
        "2513d1ad-d856-4c98-9e44-7ac1aab94fb4": "const Web3 = require(\"web3\");\nconst {providerUrl, \"contract address\": contractAddress, \"V2Factory Abi\": factoryAbi} = data ?? {};\nif (!(providerUrl && contractAddress && factoryAbi)) {\n  throw new Error(\"Input data is invalid. Please check it complies with type!\");\n}\n\nconst provider = new Web3.providers.HttpProvider(providerUrl);\nconst web3 = new Web3(provider);\n\nconst factory = new web3.eth.Contract(factoryAbi, contractAddress);\n\nasync function queryInitHash(){\n  let initHash = await factory.methods.INIT_CODE_PAIR_HASH().call();\n\n  if (initHash.startsWith('0x')){\n    initHash = initHash.substring(2);\n  }\n\n  outputs[\"init hash\"](initHash, tag);\n}\n\nqueryInitHash();"
      },
      "dependencies": {
        "npm": {
          "web3@^1.0.0": {
            "description": ""
          }
        }
      }
    }
  },
  "interface": {
    "inputs": {
      "2513d1ad-d856-4c98-9e44-7ac1aab94fb4": {
        "type": "{\"providerUrl\": string, \"contract address\": string, \"V2Factory Abi\": any[]}",
        "name": "V2Factory data"
      }
    },
    "outputs": {
      "420181c4-34a5-4a36-aa50-7de8a799af90": {
        "type": "any",
        "name": "init hash"
      }
    }
  },
  "name": "blockchain/ethereum/Uniswap/v2/Init code pair hash requester/Internal",
  "attributes": {
    "internal": true,
    "locked": true
  }
}
